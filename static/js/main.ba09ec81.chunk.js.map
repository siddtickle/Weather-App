{"version":3,"sources":["HourlyBlock.js","DailyBlock.js","WeatherInfo.js","App.js","reportWebVitals.js","index.js"],"names":["HourlyBlock","forecast","unix_timestamp","dt","date","Date","formattedTime","getHours","getMinutes","substr","iconLink","weather","icon","Box","borderRadius","boxShadow","width","height","style","display","justifyContent","alignItems","src","alt","description","temp","DailyBlock","UNIX_timestamp","a","getMonth","getDate","timeConverter","day","WeatherInfo","latitude","longitude","useState","hourlyForecast","setHourlyForecast","dailyForecast","setDailyForecast","label","setLabel","useEffect","url","URL","searchParams","append","process","undefined","fetch","then","resp","json","obj","hourly","daily","name","main","year","getFullYear","getSeconds","Button","variant","onClick","map","App","zipcode","setZipcode","setWeather","setLongitude","setLatitude","test","cod","coord","lon","lat","textAlign","marginLeft","marginRight","placeholder","onChange","event","target","value","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba09ec81.chunk.js","sourcesContent":["import React from \"react\";\nimport Box from \"@material-ui/core/Box\";\n\nfunction HourlyBlock({ forecast }) {\n  //Source: https://stackoverflow.com/questions/847185/convert-a-unix-timestamp-to-time-in-javascript\n  let unix_timestamp = forecast.dt;\n  // Create a new JavaScript Date object based on the timestamp\n  // multiplied by 1000 so that the argument is in milliseconds, not seconds.\n  var date = new Date(unix_timestamp * 1000);\n  // Hours part from the timestamp\n  var hours = date.getHours();\n  // Minutes part from the timestamp\n  var minutes = \"0\" + date.getMinutes();\n\n  // Will display time in 10:30 format\n  var formattedTime = hours + \":\" + minutes.substr(-2);\n\n  //   console.log(formattedTime);\n\n  const iconLink = `http://openweathermap.org/img/w/${forecast.weather[0].icon}.png`;\n\n  return (\n    <Box borderRadius={16} boxShadow={3} width={200} height={50}>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-evenly\",\n          alignItems: \"center\",\n        }}\n      >\n        {formattedTime}\n        <img src={iconLink} alt={forecast.weather[0].description} />\n        {forecast.temp} °F\n      </div>\n    </Box>\n  );\n}\n\nexport default HourlyBlock;\n","import React from \"react\";\nimport Box from \"@material-ui/core/Box\";\n\nfunction DailyBlock({ forecast }) {\n  const iconLink = `http://openweathermap.org/img/w/${forecast.weather[0].icon}.png`;\n\n  //Source: https://stackoverflow.com/questions/847185/convert-a-unix-timestamp-to-time-in-javascript\n  function timeConverter(UNIX_timestamp) {\n    var a = new Date(UNIX_timestamp * 1000);\n    var months = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    var month = months[a.getMonth()];\n    var date = a.getDate();\n    var time = month + \" \" + date;\n    return time;\n  }\n\n  return (\n    <Box borderRadius={16} boxShadow={3} width={200} height={50}>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-evenly\",\n          alignItems: \"center\",\n        }}\n      >\n        {timeConverter(forecast.dt)}\n        <img src={iconLink} alt={forecast.weather[0].description} />\n        {forecast.temp.day} °F\n      </div>\n    </Box>\n  );\n}\n\nexport default DailyBlock;\n","import React, { useState, useEffect } from \"react\";\nimport HourlyBlock from \"./HourlyBlock\";\nimport DailyBlock from \"./DailyBlock\";\nimport Button from \"@material-ui/core/Button\";\n\nconst API_KEY = process.env.REACT_APP_api_key;\n\nfunction WeatherInfo({ weather, latitude, longitude }) {\n  // const [forecast, setForecast] = useState(null);\n\n  const [hourlyForecast, setHourlyForecast] = useState([]);\n  const [dailyForecast, setDailyForecast] = useState([]);\n  const [label, setLabel] = useState(false);\n\n  const handleButton = () => {\n    setLabel(!label);\n  };\n\n  useEffect(() => {\n    const url = new URL(`https://api.openweathermap.org/data/2.5/onecall`);\n    url.searchParams.append(\"lat\", latitude);\n    url.searchParams.append(\"lon\", longitude);\n    url.searchParams.append(\"appid\", API_KEY);\n    url.searchParams.append(\"units\", \"imperial\");\n\n    if (latitude !== undefined && longitude !== undefined)\n      fetch(url)\n        .then((resp) => {\n          return resp.json();\n        })\n        .then((obj) => {\n          // also important to check html error codes\n          // 200 means no errors\n          //if (obj.cod === 200) {\n          // setForecast(obj);\n          // console.log(obj);\n          // console.log(obj.daily[0]);\n          setHourlyForecast(obj.hourly);\n          setDailyForecast(obj.daily);\n\n          //} else {\n          //  setForecast(false);\n          //x}\n        });\n  }, [weather, latitude, longitude]);\n\n  if (weather === false || weather == null) return <h1>Invalid Zipcode!</h1>;\n\n  const iconLink = `http://openweathermap.org/img/w/${weather.weather[0].icon}.png`;\n\n  //source: https://stackoverflow.com/questions/847185/convert-a-unix-timestamp-to-time-in-javascript\n  function timeConverter(UNIX_timestamp) {\n    var a = new Date(UNIX_timestamp * 1000);\n    var months = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    var year = a.getFullYear();\n    var month = months[a.getMonth()];\n    var date = a.getDate();\n    var hour = a.getHours();\n    var min = a.getMinutes();\n    var sec = a.getSeconds();\n    var time =\n      month + \" \" + date + \" \" + year + \", \" + hour + \":\" + min + \":\" + sec;\n    return time;\n  }\n  // console.log(timeConverter(weather.dt));\n\n  return (\n    <div>\n      {/* {JSON.stringify(forecast, undefined, 4)} */}\n      <div>\n        <h1>{weather.name}</h1>\n        <img src={iconLink} alt={weather.weather[0].description} />\n        <h3>{weather.weather[0].description} </h3>\n        <h3>{weather.main.temp} °F</h3>\n        <h3>{timeConverter(weather.dt)}</h3>\n      </div>\n      <Button variant=\"contained\" onClick={handleButton}>\n        Switch Forecast\n      </Button>\n\n      {label && (\n        <div>\n          <h3>Hourly Forecast</h3>\n          <div\n            style={{\n              display: \"grid\",\n              justifyContent: \"center\",\n            }}\n          >\n            {hourlyForecast.map((forecast) => (\n              <HourlyBlock forecast={forecast}></HourlyBlock>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {!label && (\n        <div>\n          <h3>Daily Forecast</h3>\n          <div\n            style={{\n              display: \"grid\",\n              justifyContent: \"center\",\n            }}\n          >\n            {dailyForecast.map((forecast) => (\n              <DailyBlock forecast={forecast}></DailyBlock>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default WeatherInfo;\n","import React, { useEffect, useState } from \"react\";\nimport TextField from \"@material-ui/core/Input\";\nimport WeatherInfo from \"./WeatherInfo\";\n\nconst API_KEY = process.env.REACT_APP_api_key;\nfunction App() {\n  const [zipcode, setZipcode] = useState(\"22904\");\n\n  const formChanged = (event) => {\n    setZipcode(event.target.value);\n  };\n\n  const [weather, setWeather] = useState(null);\n  const [longitude, setLongitude] = useState();\n  const [latitude, setLatitude] = useState();\n\n  useEffect(() => {\n    const url = new URL(\"https://api.openweathermap.org/data/2.5/weather\");\n    url.searchParams.append(\"appid\", API_KEY);\n    url.searchParams.append(\"zip\", zipcode);\n    url.searchParams.append(\"units\", \"imperial\");\n    if (/(^\\d{5}$)|(^\\d{5}-\\d{4}$)/.test(zipcode))\n      fetch(url)\n        .then((resp) => {\n          return resp.json();\n        })\n        .then((obj) => {\n          // also important to check html error codes\n          // 200 means no errors\n          if (obj.cod === 200) {\n            setWeather(obj);\n            // console.log(obj.coord);\n            setLongitude(obj.coord.lon);\n            setLatitude(obj.coord.lat);\n          } else {\n            setWeather(false);\n          }\n        });\n  }, [zipcode]);\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      {/* <pre>{JSON.stringify(weather, undefined, 4)}</pre> */}\n\n      <div\n        style={{\n          display: \"block\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n        }}\n      >\n        <TextField\n          placeholder=\"enter a zipcode\"\n          variant=\"outlined\"\n          onChange={formChanged}\n          type=\"number\"\n        />\n        <WeatherInfo\n          weather={weather}\n          latitude={latitude}\n          longitude={longitude}\n        />\n      </div>\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}